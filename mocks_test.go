// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package anchor_test

import (
	"context"
	"github.com/kyuff/anchor"
	"sync"
)

// Ensure, that ComponentMock does implement anchor.Component.
// If this is not the case, regenerate this file with moq.
var _ anchor.Component = &ComponentMock{}

// ComponentMock is a mock implementation of anchor.Component.
//
//	func TestSomethingThatUsesComponent(t *testing.T) {
//
//		// make and configure a mocked anchor.Component
//		mockedComponent := &ComponentMock{
//			StartFunc: func(ctx context.Context) error {
//				panic("mock out the Start method")
//			},
//		}
//
//		// use mockedComponent in code that requires anchor.Component
//		// and then make assertions.
//
//	}
type ComponentMock struct {
	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockStart sync.RWMutex
}

// Start calls StartFunc.
func (mock *ComponentMock) Start(ctx context.Context) error {
	if mock.StartFunc == nil {
		panic("ComponentMock.StartFunc: method is nil but Component.Start was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(ctx)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedComponent.StartCalls())
func (mock *ComponentMock) StartCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}
