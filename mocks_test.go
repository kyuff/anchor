// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package anchor_test

import (
	"context"
	"sync"
)

// ComponentMock is a mock implementation of anchor.Component.
//
//	func TestSomethingThatUsesComponent(t *testing.T) {
//
//		// make and configure a mocked anchor.Component
//		mockedComponent := &ComponentMock{
//			StartFunc: func(ctx context.Context) error {
//				panic("mock out the Start method")
//			},
//		}
//
//		// use mockedComponent in code that requires anchor.Component
//		// and then make assertions.
//
//	}
type ComponentMock struct {
	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockStart sync.RWMutex
}

// Start calls StartFunc.
func (mock *ComponentMock) Start(ctx context.Context) error {
	if mock.StartFunc == nil {
		panic("ComponentMock.StartFunc: method is nil but Component.Start was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(ctx)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedComponent.StartCalls())
func (mock *ComponentMock) StartCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// fullComponentMock is a mock implementation of anchor.fullComponent.
//
//	func TestSomethingThatUsesfullComponent(t *testing.T) {
//
//		// make and configure a mocked anchor.fullComponent
//		mockedfullComponent := &fullComponentMock{
//			CloseFunc: func(ctx context.Context) error {
//				panic("mock out the Close method")
//			},
//			NameFunc: func() string {
//				panic("mock out the Name method")
//			},
//			ProbeFunc: func(ctx context.Context) error {
//				panic("mock out the Probe method")
//			},
//			SetupFunc: func(ctx context.Context) error {
//				panic("mock out the Setup method")
//			},
//			StartFunc: func(ctx context.Context) error {
//				panic("mock out the Start method")
//			},
//		}
//
//		// use mockedfullComponent in code that requires anchor.fullComponent
//		// and then make assertions.
//
//	}
type fullComponentMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// NameFunc mocks the Name method.
	NameFunc func() string

	// ProbeFunc mocks the Probe method.
	ProbeFunc func(ctx context.Context) error

	// SetupFunc mocks the Setup method.
	SetupFunc func(ctx context.Context) error

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
		// Probe holds details about calls to the Probe method.
		Probe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Setup holds details about calls to the Setup method.
		Setup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockClose sync.RWMutex
	lockName  sync.RWMutex
	lockProbe sync.RWMutex
	lockSetup sync.RWMutex
	lockStart sync.RWMutex
}

// Close calls CloseFunc.
func (mock *fullComponentMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("fullComponentMock.CloseFunc: method is nil but fullComponent.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedfullComponent.CloseCalls())
func (mock *fullComponentMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *fullComponentMock) Name() string {
	if mock.NameFunc == nil {
		panic("fullComponentMock.NameFunc: method is nil but fullComponent.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//
//	len(mockedfullComponent.NameCalls())
func (mock *fullComponentMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}

// Probe calls ProbeFunc.
func (mock *fullComponentMock) Probe(ctx context.Context) error {
	if mock.ProbeFunc == nil {
		panic("fullComponentMock.ProbeFunc: method is nil but fullComponent.Probe was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockProbe.Lock()
	mock.calls.Probe = append(mock.calls.Probe, callInfo)
	mock.lockProbe.Unlock()
	return mock.ProbeFunc(ctx)
}

// ProbeCalls gets all the calls that were made to Probe.
// Check the length with:
//
//	len(mockedfullComponent.ProbeCalls())
func (mock *fullComponentMock) ProbeCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockProbe.RLock()
	calls = mock.calls.Probe
	mock.lockProbe.RUnlock()
	return calls
}

// Setup calls SetupFunc.
func (mock *fullComponentMock) Setup(ctx context.Context) error {
	if mock.SetupFunc == nil {
		panic("fullComponentMock.SetupFunc: method is nil but fullComponent.Setup was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockSetup.Lock()
	mock.calls.Setup = append(mock.calls.Setup, callInfo)
	mock.lockSetup.Unlock()
	return mock.SetupFunc(ctx)
}

// SetupCalls gets all the calls that were made to Setup.
// Check the length with:
//
//	len(mockedfullComponent.SetupCalls())
func (mock *fullComponentMock) SetupCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockSetup.RLock()
	calls = mock.calls.Setup
	mock.lockSetup.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *fullComponentMock) Start(ctx context.Context) error {
	if mock.StartFunc == nil {
		panic("fullComponentMock.StartFunc: method is nil but fullComponent.Start was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(ctx)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedfullComponent.StartCalls())
func (mock *fullComponentMock) StartCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// WireMock is a mock implementation of anchor.Wire.
//
//	func TestSomethingThatUsesWire(t *testing.T) {
//
//		// make and configure a mocked anchor.Wire
//		mockedWire := &WireMock{
//			WireFunc: func(ctx context.Context) (context.Context, context.CancelFunc) {
//				panic("mock out the Wire method")
//			},
//		}
//
//		// use mockedWire in code that requires anchor.Wire
//		// and then make assertions.
//
//	}
type WireMock struct {
	// WireFunc mocks the Wire method.
	WireFunc func(ctx context.Context) (context.Context, context.CancelFunc)

	// calls tracks calls to the methods.
	calls struct {
		// Wire holds details about calls to the Wire method.
		Wire []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockWire sync.RWMutex
}

// Wire calls WireFunc.
func (mock *WireMock) Wire(ctx context.Context) (context.Context, context.CancelFunc) {
	if mock.WireFunc == nil {
		panic("WireMock.WireFunc: method is nil but Wire.Wire was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockWire.Lock()
	mock.calls.Wire = append(mock.calls.Wire, callInfo)
	mock.lockWire.Unlock()
	return mock.WireFunc(ctx)
}

// WireCalls gets all the calls that were made to Wire.
// Check the length with:
//
//	len(mockedWire.WireCalls())
func (mock *WireMock) WireCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockWire.RLock()
	calls = mock.calls.Wire
	mock.lockWire.RUnlock()
	return calls
}

// TestingMMock is a mock implementation of anchor.TestingM.
//
//	func TestSomethingThatUsesTestingM(t *testing.T) {
//
//		// make and configure a mocked anchor.TestingM
//		mockedTestingM := &TestingMMock{
//			RunFunc: func() int {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedTestingM in code that requires anchor.TestingM
//		// and then make assertions.
//
//	}
type TestingMMock struct {
	// RunFunc mocks the Run method.
	RunFunc func() int

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
		}
	}
	lockRun sync.RWMutex
}

// Run calls RunFunc.
func (mock *TestingMMock) Run() int {
	if mock.RunFunc == nil {
		panic("TestingMMock.RunFunc: method is nil but TestingM.Run was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc()
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedTestingM.RunCalls())
func (mock *TestingMMock) RunCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
