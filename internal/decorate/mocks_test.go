// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package decorate_test

import (
	"context"
	"sync"
)

// fullComponentMock is a mock implementation of decorate.fullComponent.
//
//	func TestSomethingThatUsesfullComponent(t *testing.T) {
//
//		// make and configure a mocked decorate.fullComponent
//		mockedfullComponent := &fullComponentMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			NameFunc: func() string {
//				panic("mock out the Name method")
//			},
//			SetupFunc: func(ctx context.Context) error {
//				panic("mock out the Setup method")
//			},
//			StartFunc: func(ctx context.Context) error {
//				panic("mock out the Start method")
//			},
//		}
//
//		// use mockedfullComponent in code that requires decorate.fullComponent
//		// and then make assertions.
//
//	}
type fullComponentMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// NameFunc mocks the Name method.
	NameFunc func() string

	// SetupFunc mocks the Setup method.
	SetupFunc func(ctx context.Context) error

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
		// Setup holds details about calls to the Setup method.
		Setup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockClose sync.RWMutex
	lockName  sync.RWMutex
	lockSetup sync.RWMutex
	lockStart sync.RWMutex
}

// Close calls CloseFunc.
func (mock *fullComponentMock) Close() error {
	if mock.CloseFunc == nil {
		panic("fullComponentMock.CloseFunc: method is nil but fullComponent.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedfullComponent.CloseCalls())
func (mock *fullComponentMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *fullComponentMock) Name() string {
	if mock.NameFunc == nil {
		panic("fullComponentMock.NameFunc: method is nil but fullComponent.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//
//	len(mockedfullComponent.NameCalls())
func (mock *fullComponentMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}

// Setup calls SetupFunc.
func (mock *fullComponentMock) Setup(ctx context.Context) error {
	if mock.SetupFunc == nil {
		panic("fullComponentMock.SetupFunc: method is nil but fullComponent.Setup was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockSetup.Lock()
	mock.calls.Setup = append(mock.calls.Setup, callInfo)
	mock.lockSetup.Unlock()
	return mock.SetupFunc(ctx)
}

// SetupCalls gets all the calls that were made to Setup.
// Check the length with:
//
//	len(mockedfullComponent.SetupCalls())
func (mock *fullComponentMock) SetupCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockSetup.RLock()
	calls = mock.calls.Setup
	mock.lockSetup.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *fullComponentMock) Start(ctx context.Context) error {
	if mock.StartFunc == nil {
		panic("fullComponentMock.StartFunc: method is nil but fullComponent.Start was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(ctx)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedfullComponent.StartCalls())
func (mock *fullComponentMock) StartCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// starterMock is a mock implementation of decorate.starter.
//
//	func TestSomethingThatUsesstarter(t *testing.T) {
//
//		// make and configure a mocked decorate.starter
//		mockedstarter := &starterMock{
//			StartFunc: func(ctx context.Context) error {
//				panic("mock out the Start method")
//			},
//		}
//
//		// use mockedstarter in code that requires decorate.starter
//		// and then make assertions.
//
//	}
type starterMock struct {
	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockStart sync.RWMutex
}

// Start calls StartFunc.
func (mock *starterMock) Start(ctx context.Context) error {
	if mock.StartFunc == nil {
		panic("starterMock.StartFunc: method is nil but starter.Start was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(ctx)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedstarter.StartCalls())
func (mock *starterMock) StartCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// setupperMock is a mock implementation of decorate.setupper.
//
//	func TestSomethingThatUsessetupper(t *testing.T) {
//
//		// make and configure a mocked decorate.setupper
//		mockedsetupper := &setupperMock{
//			SetupFunc: func(ctx context.Context) error {
//				panic("mock out the Setup method")
//			},
//			StartFunc: func(ctx context.Context) error {
//				panic("mock out the Start method")
//			},
//		}
//
//		// use mockedsetupper in code that requires decorate.setupper
//		// and then make assertions.
//
//	}
type setupperMock struct {
	// SetupFunc mocks the Setup method.
	SetupFunc func(ctx context.Context) error

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Setup holds details about calls to the Setup method.
		Setup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockSetup sync.RWMutex
	lockStart sync.RWMutex
}

// Setup calls SetupFunc.
func (mock *setupperMock) Setup(ctx context.Context) error {
	if mock.SetupFunc == nil {
		panic("setupperMock.SetupFunc: method is nil but setupper.Setup was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockSetup.Lock()
	mock.calls.Setup = append(mock.calls.Setup, callInfo)
	mock.lockSetup.Unlock()
	return mock.SetupFunc(ctx)
}

// SetupCalls gets all the calls that were made to Setup.
// Check the length with:
//
//	len(mockedsetupper.SetupCalls())
func (mock *setupperMock) SetupCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockSetup.RLock()
	calls = mock.calls.Setup
	mock.lockSetup.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *setupperMock) Start(ctx context.Context) error {
	if mock.StartFunc == nil {
		panic("setupperMock.StartFunc: method is nil but setupper.Start was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(ctx)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedsetupper.StartCalls())
func (mock *setupperMock) StartCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// closerMock is a mock implementation of decorate.closer.
//
//	func TestSomethingThatUsescloser(t *testing.T) {
//
//		// make and configure a mocked decorate.closer
//		mockedcloser := &closerMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			StartFunc: func(ctx context.Context) error {
//				panic("mock out the Start method")
//			},
//		}
//
//		// use mockedcloser in code that requires decorate.closer
//		// and then make assertions.
//
//	}
type closerMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockClose sync.RWMutex
	lockStart sync.RWMutex
}

// Close calls CloseFunc.
func (mock *closerMock) Close() error {
	if mock.CloseFunc == nil {
		panic("closerMock.CloseFunc: method is nil but closer.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedcloser.CloseCalls())
func (mock *closerMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *closerMock) Start(ctx context.Context) error {
	if mock.StartFunc == nil {
		panic("closerMock.StartFunc: method is nil but closer.Start was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(ctx)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedcloser.StartCalls())
func (mock *closerMock) StartCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// namerMock is a mock implementation of decorate.namer.
//
//	func TestSomethingThatUsesnamer(t *testing.T) {
//
//		// make and configure a mocked decorate.namer
//		mockednamer := &namerMock{
//			NameFunc: func() string {
//				panic("mock out the Name method")
//			},
//			StartFunc: func(ctx context.Context) error {
//				panic("mock out the Start method")
//			},
//		}
//
//		// use mockednamer in code that requires decorate.namer
//		// and then make assertions.
//
//	}
type namerMock struct {
	// NameFunc mocks the Name method.
	NameFunc func() string

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Name holds details about calls to the Name method.
		Name []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockName  sync.RWMutex
	lockStart sync.RWMutex
}

// Name calls NameFunc.
func (mock *namerMock) Name() string {
	if mock.NameFunc == nil {
		panic("namerMock.NameFunc: method is nil but namer.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//
//	len(mockednamer.NameCalls())
func (mock *namerMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *namerMock) Start(ctx context.Context) error {
	if mock.StartFunc == nil {
		panic("namerMock.StartFunc: method is nil but namer.Start was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(ctx)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockednamer.StartCalls())
func (mock *namerMock) StartCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}
